server:
  port: 8090
  servlet:
    context-path: /
spring:
  profiles:
    active: dev
  application:
    name: provider-uac
  zipkin:
    rabbitmq:
      queue: zipkin
  sleuth:
#    web:
#      client:
#        enabled: true
    sampler:
      probability: 1.0 # 将采样比例设置为 1.0，也就是全部都需要。默认是 0.1
  rabbitmq:
    host: 192.168.139.5
    port: 5672
    username: gostyu
    password: gostyu
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.139.5:3306/passcloud_uac?useUnicode=true&characterEncoding=utf8&useSSL=false
    username: yuzhang
    password: Yuzhang0219!

  redis:
    ### Redis数据库索引（默认 0）
    database: 0
    host: 192.168.139.5
    port: 6379
    password: 123456
    jedis:
      pool:
        ###连接池最大连接数（使用负值表示没有限制）
        max-active: 8
        ###连接池最大阻塞等待时间 （使用负值表示没有限制）
        max-wait: -1
        ###连接池中的最大空闲连接
        max-idle: 5
        ###连接池中的最小空闲连接
        min-idle: 0
    ###连接超时时间（毫秒）
    timeout: 10000
  security:
    user:
      name: admin
      password: admin
#  cloud:
#    bus:
#      trace:
#        enabled: true
#      enabled: true
#热部署
  devtools:
    restart:
      enabled: true #热部署生效
      #设置重启的目录
      additional-paths: paascloud-provider/paascloud-provider-uac/src/main/java
      exclude: static/**
mybatis:
  mapper-locations: classpath*:mapper/*Mapper.xml
  type-aliases-package: com.paascloud.provider.model.domain
security:
  oauth2:
    client:
      client-id: uac
      client-secret: uac
      access-token-uri: http://localhost:8090/oauth/token
      user-authorization-uri: http://localhost:8090/oauth/authorize
#      authorized-grant-types: authorization_code,refresh_token,password
      scope: "*"
      grant-type: password
    resource:
      userInfoUri: http://localhost:8090/auth/hi
      id: provider-uac
#      prefer-token-info: false
      token-info-uri: http://localhost:8090/oauth/check_token

paascloud:
  oauth2:
    client:
      id: ${security.oauth2.resource.id}
      access-token-uri: http://localhost:8090/oauth/token
      clientId: ${security.oauth2.client.client-id}
      clientSecret: ${security.oauth2.client.client-secret}
      clientAuthenticationScheme: header
      userAuthorizationUri: http://localhost:8090/oauth/authorize
    jwtSigningKey: paascloud
  enableSqlLogInterceptor: true
  auth:
    refresh-token-url: http://admin:admin@localhost:8090/uac/hi
    active-user-url: http://admin:admin@localhost:8090/uac/hi
    rest-pwd-url: http://admin:admin@localhost:8090/uac/hi
  security:
    oauth2:
      tokenStore: "redis"
    social:
      qq:
        app-id:
        app-secret:
        providerId: qq
      weixin:
        app-id:
        app-secret:
        providerId: weixi
  zk:
    zkAddressList: 192.168.139.5:2181
    namespace: ""
  aliyun:
    rocketMq:
      consumerGroup: "12"
      producerGroup: "10"
